[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-02-09 21:04:54.376981",
  "module": "Upande Tambuzi",
  "name": "Scan QR Button",
  "script": "frappe.ui.form.on('Scan', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            \n            const farm = cur_frm.doc.farm;\n            const action = cur_frm.doc.action;\n                        \n            if (!farm || !action) {\n                frappe.throw(\"Please select a farm and action before scanning.\");\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://unpkg.com/html5-qrcode\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n            \n            \n            \n            function showQrScannerDialog() {\n                const dialog = new frappe.ui.Dialog({\n                    title: \"Scan QR Code\",\n                    fields: [\n                        { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                    ]\n                });\n\n                const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n                $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n                dialog.show();\n\n                setTimeout(() => {\n                    const qrReaderElement = document.getElementById(\"qr-reader\");\n                    if (qrReaderElement) {\n                        initializeQrScanner(qrReaderElement, dialog);\n                    } else {\n                        console.error(\"QR Reader element not found!\");\n                        frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                    }\n                }, 300);\n            }\n            \n            let isProcessing = false;\n            let createStock = false;\n            let boxLabelData  = null;\n            let isPaused = false;\n            let farmPackListDocId = null;\n            let boxStickerDocId = null;\n            let stockEntryDoc;\n            \n            function initializeQrScanner(qrReaderElement, dialog) {\n                const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n                html5QrCode.start(\n                    { facingMode: \"environment\" }, \n                    {\n                        fps: 15, \n                        qrbox: { width: 250, height: 250 } \n                    },\n                    async (decodedText, decodedResult) => {\n                        if (isProcessing || isPaused) {\n                            return;\n                        }\n                        isProcessing = true;\n                        \n                        try {\n                            if (action === \"Packing\") {\n                                if (!boxLabelData) {\n                                    boxLabelData = decodedText;\n                                    frappe.msgprint(`Box label scanned. Please scan the bunch label. ${boxLabelData}`);\n                          \n                                    isPaused = true;\n                                    \n                                    frappe.confirm(\"Ready to scan the bunch label?\", () => {\n                                        isPaused = false;\n                                    });\n                                    \n                                    isProcessing = false;\n                                    return;\n                                } else {\n                                    const bunchLabelData = decodedText;\n                                    const varietyMatch = await validateLabels(boxLabelData, bunchLabelData);\n                                    \n                                    if (!varietyMatch) {\n                                        frappe.throw(\"Bunch label does not match the box label!\");\n                                    } else {\n                                        frappe.msgprint(\"Bunch and Box labels match!\")\n                                        \n                                        if (!farmPackListDocId) {\n                                            await createFarmPackListEntry(bunchLabelData, boxLabelData, farm);\n                                            await createBoxSticker(boxLabelData, bunchLabelData)\n                                        } else {\n                                            await addBunchToFarmPackList(farmPackListDocId, bunchLabelData, boxLabelData, farm);\n                                            await addVarietyToBoxSticker(boxStickerDocId, bunchLabelData);\n                                        }\n                                        \n                                        try {\n                                            await createStockEntry(bunchLabelData, farm, action);\n                                            frappe.msgprint(`Transfered stock successfully`);\n                                        } catch (error) {\n                                            frappe.throw(`Error creating stock entry: ${error}`)\n                                        }\n                                            \n                                        isPaused = true;\n                                    \n                                        frappe.confirm(\"Bunch Scanned! Ready to scan the next bunch label?\", () => {\n                                            isPaused = false;\n                                        });\n                                    }\n                                    // isPaused = true;\n                                }\n                            }\n                            \n                            if (action == \"Receiving\" ) {\n                                createStock = true;\n                            }\n                            \n                            if (action == \"Grading\") {\n                                const urlArray = decodedText.split(\"/\");\n                                stockEntryName = urlArray[urlArray.length - 1];\n                                stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n                                \n                                await frappe.call({\n                                    method: \"frappe.client.submit\",\n                                    args: {\n                                        doc: stockEntryDoc,\n                                    }\n                                });\n                                frappe.msgprint(`Stock Entry ${stockEntryName} submitted successfully`);\n                                html5QrCode.stop();\n                                dialog.hide();\n                            }\n                            \n                            if (createStock) {\n                                const doc_name = await createStockEntry(decodedText, farm, action);\n                                frappe.msgprint(`Created Stock Entry successfully`);\n                                html5QrCode.stop();\n                                dialog.hide();\n                            }\n                            \n                        } catch (error) {\n                            frappe.throw(`Error while creating stock entry: ${error}`)\n                        } finally {\n                            isProcessing = false;\n                        }\n                        \n                        \n                        \n                    },\n                    (errorMessage) => {\n                        console.warn(\"Scanning error:\", errorMessage);\n                    }\n                ).catch((err) => {\n                    console.error(\"Error starting QR scanner:\", err);\n                    frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n                });\n\n                dialog.on(\"hide\", function () {\n                    html5QrCode.stop().then(() => {\n                        console.log(\"QR Scanner stopped.\");\n                    }).catch((err) => {\n                        console.error(\"Error stopping QR scanner:\", err);\n                    });\n                });\n            }\n            \n            function getStockEntryIdFromUrl(stockEntryUrl) {\n                const stock_entry_url_arr = stockEntryUrl.split(\"/\");\n                const arrLength = stock_entry_url_arr.length;\n                const stock_entry_id = stock_entry_url_arr[arrLength - 1];\n                \n                return stock_entry_id;\n            }\n            \n            async function createBoxSticker(boxLabelData, bunchLabelData) {\n                try {\n                    const parsedBoxData = JSON.parse(boxLabelData);\n                    const orderId = parsedBoxData.order_id;\n                    const box_id = parsedBoxData.box_id;\n                    const stockEntryId = getStockEntryIdFromUrl(bunchLabelData);\n\n                    // Fetch Sales Order & Stock Entry\n                    const orderPick = await frappe.db.get_doc(\"Order Pick List\", orderId);\n                    \n                    const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n                    \n                    const itemCode = stockEntry.items[0].item_code;\n                    const uom = stockEntry.items[0].uom;\n                    const length = stockEntry.custom_stem_length;\n                    const customerId = orderPick.customer;\n                    \n                    const response = await frappe.call({\n                        method: 'upande_tambuzi.server_scripts.create_box_sticker.create_box_sticker',\n                        args: {\n                            variety: itemCode,\n                            uom: uom,\n                            customer: customerId,\n                            length: length,\n                            box_number: box_id,\n                        },\n                        callback: function (response) {\n                            boxStickerDocId = response.message.docname\n                            frappe.msgprint(\"Box Label Sticker Created Successfully!\")\n                        }\n                    })\n                    \n                } catch (err) {\n                    frappe.throw(`Error creating Box Label: ${err}`)\n                }\n            }\n            \n            \n            async function addVarietyToBoxSticker(boxStickerDocId, bunchLabelData) {\n                try {\n                    const stockEntryId = getStockEntryIdFromUrl(bunchLabelData);\n                    const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n                    \n                    const variety = stockEntry.items[0].item_code\n                    const uom = stockEntry.items[0].uom\n                    \n                    const response = frappe.call({\n                        method: 'upande_tambuzi.server_scripts.add_variety_to_box_sticker.add_variety_to_sticker',\n                        args: {\n                            box_label_sticker_name: boxStickerDocId,\n                            variety: variety,\n                            uom: uom\n                        },\n                        callback: function (response) {\n                            frappe.msgprint(`${variety} added to Box Label Sticker`)\n                        }\n                    })\n\n                } catch (err) {\n                    frappe.throw(`Error adding ${variety} to Box Label Sticker: ${err}`)\n                }\n            }\n            \n            \n            async function createFarmPackListEntry(bunchLabelData, boxLabelData, farm) {\n                try {\n                    const parsedBoxData = JSON.parse(boxLabelData);\n                    const orderId = parsedBoxData.order_id;\n                    const stockEntryId = getStockEntryIdFromUrl(bunchLabelData);\n\n                    // Fetch Sales Order & Stock Entry\n                    const orderPick = await frappe.db.get_doc(\"Order Pick List\", orderId);\n                    \n                    const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n            \n                    if (!orderPick || !stockEntry || !stockEntry.items.length) {\n                        frappe.throw(\"Invalid Sales Order or Stock Entry data\");\n                    }\n            \n                    const sourceWarehouse = `${farm} Packed Store - TL`;\n            \n                    const itemCode = stockEntry.items[0].item_code;\n                    const uom = stockEntry.items[0].uom;\n                    \n                    // Quantity scanned should always be one per scan\n                    const quantity = 1;\n                    const customerId = orderPick.customer;\n                    const sales_order_id = orderPick.sales_order;\n                    const boxId = parsedBoxData.box_id;\n            \n                    // Create new Farm Pack List document\n                    const packListDoc = frappe.model.get_new_doc(\"Farm Pack List\");\n                    packListDoc.pack_list_item = [{\n                        item_code: itemCode,\n                        uom: uom,\n                        qty: quantity,\n                        source_warehouse: sourceWarehouse,\n                        sales_order_id: sales_order_id,\n                        customer_id: customerId,\n                        box_id: boxId\n                    }];\n                    \n                    // Save document\n                    const savedDoc = await frappe.db.insert(packListDoc);\n                    \n                    farmPackListDocId = savedDoc.name;\n\n                    frappe.msgprint(\"Farm Pack List entry created successfully!\");\n            \n                } catch (error) {\n                    console.error(\"Error saving Farm Pack List:\", error);\n                    frappe.throw(`Error saving Farm Pack List: ${error.message}`);\n                }\n            }\n\n            \n            // async function createFarmPackListEntry(bunchLabelData, boxLabelData, farm) {\n            //     try {\n            //         const response = await frappe.call({\n            //             method: 'upande_tambuzi.server_scripts.create_farm_pack_list_entry.create_farm_pack_list_entry',\n            //             args: {\n            //                 bunch_label_data: bunchLabelData,\n            //                 box_label_data: boxLabelData,\n            //                 farm: farm,\n            //             },\n            //             callback: function (response) {\n            //                 farmPackListDocId = response.message.docname;\n            //                 frappe.msgprint(`Farm Pack List created: ${farmPackListDocId}`);\n            //             }\n            //         });\n            //     } catch (error) {\n            //         console.error('Error saving Farm Pack List:', error);\n            //         frappe.throw(`Error saving Farm Pack List: ${error}`);\n            //     }\n            // }\n            \n            \n            \n            \n            \n            \n            // async function addBunchToFarmPackList(farmPackListDocId, bunchLabelData, boxLabelData, farm) {\n            //     try {\n            //         // Parse the box label data\n            //         const parsedBoxData = JSON.parse(boxLabelData);\n            //         const orderId = parsedBoxData.order_id;\n            //         const boxId = parsedBoxData.box_id;\n                    \n            //         // Get stock entry ID from the bunch label data\n            //         const stockEntryId = getStockEntryIdFromUrl(bunchLabelData);\n                    \n            //         const orderPickList = await frappe.db.get_doc(\"Order Pick List\", orderId);\n            //         const stockEntry = await frappe.db.get_doc(\"Stock Entry\", stockEntryId);\n            \n            //         if (!orderPickList || !stockEntry) {\n            //             frappe.msgprint('Order Pick List or Stock Entry not found.');\n            //             return;\n            //         }\n            \n            //         const sourceWarehouse = `${farm} Packed Store - TL`;\n            //         const itemCode = stockEntry.items[0].item_code;\n            //         const uom = stockEntry.items[0].uom;\n            //         const quantity = stockEntry.items[0].qty;\n            //         const customerId = orderPickList.customer;\n            //         // const salesOrderId = orderPickList.name;\n                    \n            //         // async function updateFarmPackList(farmPackListDocId, itemCode, uom, quantity, customerId, sourceWarehouse, boxId) {\n            //         //     try {\n            //         //         const response = await frappe.call({\n            //         //             method: \"upande_tambuzi.server_scripts.save_farm_pack_list.save_farm_pack_list\",\n            //         //             args: {\n            //         //                 farm_pack_list_id: farmPackListDocId,\n            //         //                 item_code: itemCode,\n            //         //                 uom: uom,\n            //         //                 quantity: quantity,\n            //         //                 source_warehouse: sourceWarehouse,\n            //         //                 box_id: boxId,\n            //         //                 customer_id: customerId \n            //         //             },\n            //         //         });\n            //         //     } catch (error) {\n            //         //         console.error(\"Error updating Farm Pack List:\", error);\n            //         //     }\n            //         // }\n            \n                    \n            //         const packListDoc = await frappe.db.get_doc(\"Farm Pack List\", farmPackListDocId);\n                    \n            \n            //         // Append the new item to the Farm Pack List\n            //         packListDoc.pack_list_item = [{\n            //             \"item_code\": itemCode,\n            //             \"uom\": uom,\n            //             \"qty\": quantity,\n            //             \"source_warehouse\": sourceWarehouse,\n            //             // \"sales_order_id\": salesOrderId,\n            //             \"customer_id\": customerId,\n            //             \"box_id\": boxId,\n            //         }]\n            \n            //         // Save the document\n            //         await frappe.db.save_doc(packListDoc);\n            //         // Success message\n            //         frappe.msgprint(`Bunch successfully added to Farm Pack List!`);\n            //     } catch (error) {\n            //         console.error('Error adding bunch to Farm Pack List:', error);\n            //         frappe.msgprint(`Error adding bunch to Farm Pack List: ${error.message}`);\n            //     }\n            // }\n\n            \n            async function addBunchToFarmPackList(farmPackListDocId, bunchLabelData, boxLabelData, farm) {\n                try {\n                    await frappe.call({\n                        method: 'upande_tambuzi.server_scripts.update_farm_pack_list.add_bunch_to_farm_pack_list',\n                        args: {\n                            farm_pack_list_doc_id: farmPackListDocId,\n                            bunch_label_data: bunchLabelData,\n                            box_label_data: boxLabelData, \n                            farm: farm,\n                        },\n                        callback: function (response) {\n                            frappe.msgprint(`Added bunch to Farm Pack List: ${farmPackListDocId}`);\n                        }\n                    });\n                } catch (error) {\n                    console.error('Error adding bunch to Farm Pack List:', error);\n                    frappe.throw(`Error adding bunch to Farm Pack List: ${error}`);\n                }\n            }\n\n\n            async function validateLabels(boxLabelData, bunchLabelData) {\n                const stock_entry_url_arr = bunchLabelData.split(\"/\");\n                const arrLength = stock_entry_url_arr.length;\n                const stock_entry_id = stock_entry_url_arr[arrLength - 1];\n                \n                const parsedBoxData = JSON.parse(boxLabelData);\n                const orderId = parsedBoxData.order_id;\n                \n                let orderPickVariety;\n                let stockEntryVariety;\n                \n                // Get the variety associated with the stock_entry_id (bunch) first\n                try {\n                    const stockEntryDocument = await frappe.db.get_doc('Stock Entry', stock_entry_id);\n                    \n                    if (stockEntryDocument) {\n                        stockEntryVariety = stockEntryDocument.items[0].item_code;\n                    } else {\n                        frappe.msgprint(`No Stock Entry found for ${stock_entry_id}`);\n                    }\n                } catch (error) {\n                    frappe.throw(`Error fetching Stock Entry: ${error}`);\n                }\n                \n                // Get the variety associated with the order_pick_list and stockEntryVariety\n                try {\n                    const orderPickList = await frappe.db.get_doc(\"Order Pick List\", orderId);\n                    const numberOfItems = orderPickList.locations.length;\n                    \n                    if (orderPickList) {\n\n                        for (let i = 0; i < numberOfItems; i++) {\n                            let currVariety = orderPickList.locations[i].item_code;\n                            \n                            if (currVariety === stockEntryVariety ) {\n                                orderPickVariety = currVariety;\n                            }\n                        }\n                        \n                    } else {\n                        frappe.msgprint(`No Order Pick List found for ${orderId}`);\n                    }\n                } catch (error) {\n                    frappe.throw(`Error fetching Order Pick List: ${error}`);\n                }\n                \n                \n                \n                if (orderPickVariety !== stockEntryVariety) {\n                    return false;\n                }\n                \n                return true;\n            } \n            \n            async function createStockEntry(decodedText, farm, action) {\n                const urlArray = decodedText.split(\"/\");\n                const arrayLength = urlArray.length;\n                const stockEntryName = urlArray[arrayLength - 1];\n                \n                \n                let variety;\n                let qty;\n                let breeder;\n                let grower;\n                let uom;\n                let harvester;\n                let greenhouse;\n                let block__bed_number;\n                \n                // Use the stockEntryName to get the stock_entry_data field data needed for\n                // stock transfer\n                if (action == \"Receiving\") {\n                    try {\n                        stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n                    } catch (error) {\n                        frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n                    }\n                    \n                    const items = stockEntryDoc.items;\n                    \n                    breeder = stockEntryDoc.custom_breeder;\n                    grower = stockEntryDoc.custom_grower;\n                    greenhouse = stockEntryDoc.custom_greenhouse;\n                    harvester = stockEntryDoc.custom_harvester;\n                    block__bed_number = stockEntryDoc.custom_block__bed_number\n                    \n                    \n                    items.forEach((item) => {\n                        variety = item.item_code;\n                        qty = item.qty;\n                    });\n                }\n                \n                if (action === \"Packing\") {\n                    try {\n                        stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n                    } catch (error) {\n                        frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n                    }\n                    \n                    const items = stockEntryDoc.items;\n                    \n                    items.forEach((item) => {\n                        variety = item.item_code;\n                        \n                        // Flowers are packed per 1 bunch\n                        qty = 1;\n                        uom = item.uom;\n                    });\n                }\n                \n                const stock_entry_type_mapping = {\n                    \"Receiving\": \"Receiving\",\n                    \"Grading\": \"\",\n                    \"Packing\": \"Packing\",\n                    \"Loading to Truck\": \"Material Transfer\"\n                };\n                \n                const stock_entry_type = stock_entry_type_mapping[action];\n                \n                // Maps the location of scan to the movement of stock\n                const locationMapping = {\n                    \"Burguret Receiving\": { source: `${greenhouse}`, target: \"Burguret Receiving Cold Store - TL\" },\n                    // \"Burguret Grading\": { source: \"Burguret Ungraded Store - TL\", target: \"Burguret Graded Store - TL\" },\n                    \"Burguret Packing\": { source: \"Burguret Graded Sold - TL\", target: \"Burguret Dispatch Cold Store - TL\" },\n                    // \"Burguret Loading to Truck\": { source: \"Burguret - Packaging\", target: \"Burguret - Packaging\" },\n                    \"Turaco Receiving\": { source: `${greenhouse}`, target: \"Turaco Receiving Cold Store - TL\" },\n                    // \"Turaco Grading\": { source: \"Turaco Ungraded Store - TL\", target: \"Turaco Graded Store - TL\" },\n                    \"Turaco Packing\": { source: \"Turaco Graded Sold - TL\", target: \"Turaco Dispatch Cold Store - TL\" },\n                    // \"Turaco Loading to Truck\": { source: \"Turaco - Packaging\", target: \"Turaco - Packaging\" },\n                    \"Pendekeza Receiving\": { source: `${greenhouse}`, target: \"Pendekeza Receiving Cold Store - TL\" },\n                    // \"Pendekeza Grading\": { source: \"Pendekeza Ungraded Store - TL\", target: \"Pendekeza Graded Store - TL\" },\n                    \"Pendekeza Packing\": { source: \"Pendekeza Graded Sold - TL\", target: \"Pendekeza Dispatch Cold Store - TL\" }\n                    // \"Pendekeza Loading to Truck\": { source: \"Pendekeza - Packaging\", target: \"Pendekeza - Packaging\" }\n                };\n                \n                const scanLocation = `${farm} ${action}`;\n                \n                const stockmvt = locationMapping[scanLocation];\n\n                if (!stockmvt) {\n                    frappe.msgprint(`Invalid scan location: ${scanLocation}`);\n                    return;\n                }\n                stock_entry_data = {\n                    \"location data\": stockmvt,\n                    \"variety\": variety,\n                    \"quantity\": qty,\n                    \"breeder\": breeder,\n                    \"grower\": grower,\n                    \"harvester\": harvester,\n                    \"greenhouse\": greenhouse,\n                    \"stock entry type\": stock_entry_type,\n                    \"uom\": uom,\n                    \"block__bed_number\": block__bed_number\n                };\n            \n                const created_stock_entry = frappe.call({\n                    method: \"upande_tambuzi.server_scripts.create_stock_entry.create_stock_entry\",\n                    args: {\n                        stock_entry_data: JSON.stringify(stock_entry_data),\n                    }\n                });\n\n                return created_stock_entry;\n\n            }\n            \n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-01-25 20:29:13.185615",
  "module": "Upande Tambuzi",
  "name": "Populate Number of Items",
  "script": "frappe.ui.form.on('Stock Entry', {\n    refresh: function(frm){\n        $.each(frm.doc.items, function(i, row){\n            if (row.uom == 'Stems') {\n                row.custom_number_of_stems = row.qty;\n            }\n        });\n    }\n});",
  "view": "Form"
 }
]