[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Scan",
  "enabled": 1,
  "modified": "2025-01-31 09:34:21.493423",
  "module": "Upande Tambuzi",
  "name": "Scan QR Button",
  "script": "frappe.ui.form.on('Scan', {\n    refresh(frm) {\n        frm.add_custom_button(\"Scan QR Code\", () => {\n            \n            const farm = cur_frm.doc.farm;\n            const action = cur_frm.doc.action;\n                        \n            if (!farm || !action) {\n                frappe.throw(\"Please select a farm and action before scanning.\");\n                return;\n            }\n            \n            if (!window.Html5Qrcode) {\n                const script = document.createElement(\"script\");\n                script.src = \"https://unpkg.com/html5-qrcode\";\n                script.onload = () => {\n                    console.log(\"Html5Qrcode library loaded successfully.\");\n                    showQrScannerDialog();\n                };\n                script.onerror = () => {\n                    console.error(\"Failed to load Html5Qrcode library.\");\n                    frappe.msgprint(\"Failed to load QR scanning library. Please check your network connection.\");\n                };\n                document.head.appendChild(script);\n            } else {\n                showQrScannerDialog();\n            }\n            \n            \n            \n            function showQrScannerDialog() {\n                const dialog = new frappe.ui.Dialog({\n                    title: \"Scan QR Code\",\n                    fields: [\n                        { fieldname: 'qr_scanner', fieldtype: 'HTML', options: '' }\n                    ]\n                });\n\n                const $wrapper = dialog.fields_dict.qr_scanner.$wrapper;\n                $wrapper.html('<div id=\"qr-reader\" style=\"width: 100%;\"></div>');\n\n                dialog.show();\n\n                setTimeout(() => {\n                    const qrReaderElement = document.getElementById(\"qr-reader\");\n                    if (qrReaderElement) {\n                        initializeQrScanner(qrReaderElement, dialog);\n                    } else {\n                        console.error(\"QR Reader element not found!\");\n                        frappe.msgprint(\"Error initializing QR scanner. Please try again.\");\n                    }\n                }, 300);\n            }\n            \n            let isProcessing = false;\n            let createStock = false;\n            let boxLabelData  = null;\n            let isPaused = false;\n            let stockEntryDoc;\n            \n            function initializeQrScanner(qrReaderElement, dialog) {\n                const html5QrCode = new Html5Qrcode(\"qr-reader\");\n\n                html5QrCode.start(\n                    { facingMode: \"environment\" }, \n                    {\n                        fps: 15, \n                        qrbox: { width: 250, height: 250 } \n                    },\n                    async (decodedText, decodedResult) => {\n                        if (isProcessing || isPaused) {\n                            return;\n                        }\n                        isProcessing = true;\n                        \n                        try {\n                            if (action === \"Packing\") {\n                                if (!boxLabelData) {\n                                    boxLabelData = decodedText;\n                                    frappe.msgprint(`Box label scanned. Please scan the bunch label. ${boxLabelData}`);\n                          \n                                    isPaused = true;\n                                    \n                                    frappe.confirm(\"Ready to scan the bunch label?\", () => {\n                                        isPaused = false;\n                                    });\n                                    \n                                    isProcessing = false;\n                                    return;\n                                } else {\n                                    const bunchLabelData = decodedText;\n                                    const varietyMatch = await validateLabels(boxLabelData, bunchLabelData);\n                                    \n                                    if (!varietyMatch) {\n                                        frappe.throw(\"Bunch label does not match the box label!\");\n                                    } else {\n                                        frappe.msgprint(\"Bunch and Box labels match!\")\n                                        // Create a Stock Entry, Material Transfer from {farm} sold store - TL to {farm} Packed Store - TL \n                                    \n                                        await createStockEntry(bunchLabelData, farm, action);\n                                        frappe.msgprint(`Created Stock Entry successfully`);\n                                        html5QrCode.stop();\n                                        dialog.hide();\n                                    }\n                                    isPaused = true;\n                                }\n                            }\n                            \n                            if (action == \"Receiving\" ) {\n                                createStock = true;\n                            }\n                            \n                            if (action == \"Grading\") {\n                                const urlArray = decodedText.split(\"/\");\n                                stockEntryName = urlArray[urlArray.length - 1];\n                                stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n                                \n                                await frappe.call({\n                                    method: \"frappe.client.submit\",\n                                    args: {\n                                        doc: stockEntryDoc,\n                                    }\n                                });\n                                frappe.msgprint(`Stock Entry ${stockEntryName} submitted successfully`);\n                                html5QrCode.stop();\n                                dialog.hide();\n                            }\n                            \n                            if (createStock) {\n                                const doc_name = await createStockEntry(decodedText, farm, action);\n                                frappe.msgprint(`Created Stock Entry successfully`);\n                                html5QrCode.stop();\n                                dialog.hide();\n                            }\n                            \n                        } catch (error) {\n                            frappe.throw(`Error while creating stock entry: ${error}`)\n                        } finally {\n                            isProcessing = false;\n                        }\n                        \n                        \n                        \n                    },\n                    (errorMessage) => {\n                        console.warn(\"Scanning error:\", errorMessage);\n                    }\n                ).catch((err) => {\n                    console.error(\"Error starting QR scanner:\", err);\n                    frappe.msgprint(\"Unable to access the camera. Please ensure permissions are granted and try again.\");\n                });\n\n                dialog.on(\"hide\", function () {\n                    html5QrCode.stop().then(() => {\n                        console.log(\"QR Scanner stopped.\");\n                    }).catch((err) => {\n                        console.error(\"Error stopping QR scanner:\", err);\n                    });\n                });\n            }\n\n            async function validateLabels(boxLabelData, bunchLabelData) {\n                const stock_entry_url_arr = bunchLabelData.split(\"/\");\n                const arrLength = stock_entry_url_arr.length;\n                const stock_entry_id = stock_entry_url_arr[arrLength - 1];\n                \n                const parsedBoxData = JSON.parse(boxLabelData);\n                const orderId = parsedBoxData.order_id;\n                \n                let salesOrderVariety;\n                let stockEntryVariety;\n                \n                // Get the variety associated with the order_id from Sales Order Doctype\n                try {\n                    const salesOrder = await frappe.db.get_doc(\"Sales Order\", orderId);\n                    \n                    if (salesOrder) {\n                        salesOrderVariety = salesOrder.items[0].item_code;\n                    } else {\n                        frappe.msgprint(`No Sales Order found for ${orderId}`);\n                    }\n                } catch (error) {\n                    frappe.throw(`Error fetching Sales Order: ${error}`);\n                }\n                \n                // Get the variety associated with the stock_entry_id\n                try {\n                    const stockEntryDocument = await frappe.db.get_doc('Stock Entry', stock_entry_id);\n                    \n                    if (stockEntryDocument) {\n                        stockEntryVariety = stockEntryDocument.items[0].item_code;\n                    } else {\n                        frappe.msgprint(`No Stock Entry found for ${stock_entry_id}`);\n                    }\n                } catch (error) {\n                    frappe.throw(`Error fetching Stock Entry: ${error}`);\n                }\n                \n                if (salesOrderVariety !== stockEntryVariety) {\n                    return false;\n                }\n                \n                return true;\n            } \n            \n            async function createStockEntry(decodedText, farm, action) {\n                const urlArray = decodedText.split(\"/\");\n                const arrayLength = urlArray.length;\n                const stockEntryName = urlArray[arrayLength - 1];\n                \n                \n                let variety;\n                let qty;\n                let breeder;\n                let grower;\n                let uom;\n                let harvester;\n                let greenhouse;\n                \n                // Use the stockEntryName to get the stock_entry_data field data needed for\n                // stock transfer\n                if (action == \"Receiving\") {\n                    try {\n                        stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n                    } catch (error) {\n                        frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n                    }\n                    \n                    const items = stockEntryDoc.items;\n                    \n                    items.forEach((item) => {\n                        variety = item.item_code;\n                        qty = item.qty;\n                        breeder = item.custom_breeder;\n                        grower = item.custom_grower;\n                        greenhouse = item.custom_greenhouse;\n                        harvester = item.custom_harvester;\n                    });\n                }\n                \n                if (action === \"Packing\") {\n                    try {\n                        stockEntryDoc = await frappe.db.get_doc('Stock Entry', stockEntryName);\n                    } catch (error) {\n                        frappe.throw(`Failed to fetch Stock Entry: ${error}`);\n                    }\n                    \n                    const items = stockEntryDoc.items;\n                    \n                    items.forEach((item) => {\n                        variety = item.item_code;\n                        qty = item.qty;\n                        uom = item.uom;\n                    });\n                }\n                \n                const stock_entry_type_mapping = {\n                    \"Receiving\": \"Material Transfer\",\n                    \"Grading\": \"\",\n                    \"Packing\": \"Material Transfer\",\n                    \"Loading to Truck\": \"Material Transfer\"\n                };\n                \n                const stock_entry_type = stock_entry_type_mapping[action];\n                \n                // Maps the location of scan to the movement of stock\n                const locationMapping = {\n                    \"Burguret Receiving\": { source: \"Burguret Greenhouse - TL\", target: \"Burguret Ungraded Store - TL\" },\n                    // \"Burguret Grading\": { source: \"Burguret Ungraded Store - TL\", target: \"Burguret Graded Store - TL\" },\n                    \"Burguret Packing\": { source: \"Burguret Sold Store - TL\", target: \"Burguret Packed Store - TL\" },\n                    // \"Burguret Loading to Truck\": { source: \"Burguret - Packaging\", target: \"Burguret - Packaging\" },\n                    \"Turaco Receiving\": { source: \"Turaco Greenhouse - TL\", target: \"Turaco Ungraded Store - TL\" },\n                    // \"Turaco Grading\": { source: \"Turaco Ungraded Store - TL\", target: \"Turaco Graded Store - TL\" },\n                    \"Turaco Packing\": { source: \"Turaco Sold Store - TL\", target: \"Turaco Packed Store - TL\" },\n                    // \"Turaco Loading to Truck\": { source: \"Turaco - Packaging\", target: \"Turaco - Packaging\" },\n                    \"Pendekeza Receiving\": { source: \"Pendekeza Greenhouse - TL\", target: \"Pendekeza Ungraded Store - TL\" },\n                    // \"Pendekeza Grading\": { source: \"Pendekeza Ungraded Store - TL\", target: \"Pendekeza Graded Store - TL\" },\n                    \"Pendekeza Packing\": { source: \"Pendekeza Sold Store - TL\", target: \"Pendekeza Packed Store - TL\" }\n                    // \"Pendekeza Loading to Truck\": { source: \"Pendekeza - Packaging\", target: \"Pendekeza - Packaging\" }\n                };\n                \n                // scanLocation depends on the 'farm' and 'action' fields\n                const scanLocation = `${farm} ${action}`;\n                \n                const stockmvt = locationMapping[scanLocation];\n\n                if (!stockmvt) {\n                    frappe.msgprint(`Invalid scan location: ${scanLocation}`);\n                    return;\n                }\n                stock_entry_data = {\n                    \"location data\": stockmvt,\n                    \"variety\": variety,\n                    \"quantity\": qty,\n                    \"breeder\": breeder,\n                    \"grower\": grower,\n                    \"harvester\": harvester,\n                    \"greenhouse\": greenhouse,\n                    \"stock entry type\": stock_entry_type,\n                    \"uom\": uom\n                };\n            \n                const created_stock_entry = frappe.call({\n                    method: \"upande_tambuzi.server_scripts.create_stock_entry.create_stock_entry\",\n                    args: {\n                        stock_entry_data: JSON.stringify(stock_entry_data),\n                    }\n                });\n                \n                \n\n                return created_stock_entry;\n\n            }\n            \n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Stock Entry",
  "enabled": 1,
  "modified": "2025-01-25 20:29:13.185615",
  "module": "Upande Tambuzi",
  "name": "Populate Number of Items",
  "script": "frappe.ui.form.on('Stock Entry', {\n    refresh: function(frm){\n        $.each(frm.doc.items, function(i, row){\n            if (row.uom == 'Stems') {\n                row.custom_number_of_stems = row.qty;\n            }\n        });\n    }\n});",
  "view": "Form"
 }
]